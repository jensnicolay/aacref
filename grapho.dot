digraph G {
1 [label="1 | (ev (let ((p #(struct:«quo» 2 (1 2 3 4)))) ( 1)"];
1 -> 2;
2 [label="2 | (ev #(struct:«quo» 2 (1 2 3 4)) 1)"];
2 -> 3;
3 [label="3 | (ko #<set: #(struct:addr (1 2 3 4))> 1)"];
3 -> 4;
4 [label="4 | (ev (member 8 p) 1)"];
4 -> 5;
5 [label="5 | (ev (let ((c (null? lst))) (if c #f (let ((a 2)"];
5 -> 6;
6 [label="6 | (ev (null? lst) 2)"];
6 -> 7;
7 [label="7 | (ko #<set: BOOL> 2)"];
7 -> 8;
8 [label="8 | (ev (if c #f (let ((a (car lst))) (let ((e ( 2)"];
8 -> 9;
8 -> 10;
9 [label="9 | (ev #f 2)"];
9 -> 11;
11 [label="11 | (ko #<set: BOOL> 2)"];
11 -> 12;
12 [label="12 | (ko #<set: BOOL> 1)"];
10 [label="10 | (ev (let ((a (car lst))) (let ((e (equal? a  2)"];
10 -> 13;
13 [label="13 | (ev (car lst) 2)"];
13 -> 14;
14 [label="14 | (ko #<set: NUM> 2)"];
14 -> 15;
15 [label="15 | (ev (let ((e (equal? a v))) (if e lst (let ( 2)"];
15 -> 16;
16 [label="16 | (ev (equal? a v) 2)"];
16 -> 17;
17 [label="17 | (ko #<set: BOOL> 2)"];
17 -> 18;
18 [label="18 | (ev (if e lst (let ((d (cdr lst))) (member v 2)"];
18 -> 19;
18 -> 20;
19 [label="19 | (ev (let ((d (cdr lst))) (member v d)) 2)"];
19 -> 21;
21 [label="21 | (ev (cdr lst) 2)"];
21 -> 22;
20 [label="20 | (ev lst 2)"];
20 -> 23;
23 [label="23 | (ko #<set: #(struct:addr (1 2 3 4))> 2)"];
23 -> 24;
24 [label="24 | (ko #<set: #(struct:addr (1 2 3 4))> 1)"];
22 [label="22 | (ko #<set: #(struct:addr (2 3 4))> 2)"];
22 -> 25;
25 [label="25 | (ev (member v d) 2)"];
25 -> 26;
26 [label="26 | (ev (let ((c (null? lst))) (if c #f (let ((a 3)"];
26 -> 27;
27 [label="27 | (ev (null? lst) 3)"];
27 -> 28;
28 [label="28 | (ko #<set: BOOL> 3)"];
28 -> 29;
29 [label="29 | (ev (if c #f (let ((a (car lst))) (let ((e ( 3)"];
29 -> 30;
29 -> 31;
30 [label="30 | (ev (let ((a (car lst))) (let ((e (equal? a  3)"];
30 -> 32;
31 [label="31 | (ev #f 3)"];
31 -> 33;
33 [label="33 | (ko #<set: BOOL> 3)"];
33 -> 11;
32 [label="32 | (ev (car lst) 3)"];
32 -> 34;
34 [label="34 | (ko #<set: NUM> 3)"];
34 -> 35;
35 [label="35 | (ev (let ((e (equal? a v))) (if e lst (let ( 3)"];
35 -> 36;
36 [label="36 | (ev (equal? a v) 3)"];
36 -> 37;
37 [label="37 | (ko #<set: BOOL> 3)"];
37 -> 38;
38 [label="38 | (ev (if e lst (let ((d (cdr lst))) (member v 3)"];
38 -> 39;
38 -> 40;
39 [label="39 | (ev lst 3)"];
39 -> 41;
41 [label="41 | (ko #<set: #(struct:addr (2 3 4)) #(struct:a 3)"];
41 -> 42;
42 [label="42 | (ko #<set: #(struct:addr (2 3 4)) #(struct:a 2)"];
42 -> 43;
40 [label="40 | (ev (let ((d (cdr lst))) (member v d)) 3)"];
40 -> 44;
44 [label="44 | (ev (cdr lst) 3)"];
44 -> 45;
45 [label="45 | (ko #<set: #(struct:addr (2 3 4)) #(struct:a 3)"];
45 -> 46;
46 [label="46 | (ev (member v d) 3)"];
46 -> 47;
43 [label="43 | (ko #<set: #(struct:addr (2 3 4)) #(struct:a 1)"];
47 [label="47 | (ev (let ((c (null? lst))) (if c #f (let ((a 4)"];
47 -> 48;
48 [label="48 | (ev (null? lst) 4)"];
48 -> 49;
49 [label="49 | (ko #<set: BOOL> 4)"];
49 -> 50;
50 [label="50 | (ev (if c #f (let ((a (car lst))) (let ((e ( 4)"];
50 -> 51;
50 -> 52;
51 [label="51 | (ev #f 4)"];
51 -> 53;
53 [label="53 | (ko #<set: BOOL> 4)"];
53 -> 33;
52 [label="52 | (ev (let ((a (car lst))) (let ((e (equal? a  4)"];
52 -> 54;
54 [label="54 | (ev (car lst) 4)"];
54 -> 55;
55 [label="55 | (ko #<set: NUM> 4)"];
55 -> 56;
56 [label="56 | (ev (let ((e (equal? a v))) (if e lst (let ( 4)"];
56 -> 57;
57 [label="57 | (ev (equal? a v) 4)"];
57 -> 58;
58 [label="58 | (ko #<set: BOOL> 4)"];
58 -> 59;
59 [label="59 | (ev (if e lst (let ((d (cdr lst))) (member v 4)"];
59 -> 60;
59 -> 61;
60 [label="60 | (ev (let ((d (cdr lst))) (member v d)) 4)"];
60 -> 62;
62 [label="62 | (ev (cdr lst) 4)"];
62 -> 63;
63 [label="63 | (ko #<set: #(struct:addr (2 3 4)) #(struct:a 4)"];
63 -> 64;
64 [label="64 | (ev (member v d) 4)"];
64 -> 65;
65 [label="65 | (ev (let ((c (null? lst))) (if c #f (let ((a 5)"];
65 -> 66;
61 [label="61 | (ev lst 4)"];
61 -> 67;
67 [label="67 | (ko #<set: #(struct:addr (2 3 4)) #(struct:a 4)"];
67 -> 68;
68 [label="68 | (ko #<set: #(struct:addr (2 3 4)) #(struct:a 3)"];
68 -> 69;
69 [label="69 | (ko #<set: #(struct:addr (2 3 4)) #(struct:a 2)"];
69 -> 70;
70 [label="70 | (ko #<set: #(struct:addr (2 3 4)) #(struct:a 1)"];
66 [label="66 | (ev (null? lst) 5)"];
66 -> 71;
71 [label="71 | (ko #<set: BOOL> 5)"];
71 -> 72;
72 [label="72 | (ev (if c #f (let ((a (car lst))) (let ((e ( 5)"];
72 -> 73;
72 -> 74;
73 [label="73 | (ev (let ((a (car lst))) (let ((e (equal? a  5)"];
73 -> 75;
75 [label="75 | (ev (car lst) 5)"];
75 -> 76;
76 [label="76 | (ko #<set: NUM> 5)"];
76 -> 77;
77 [label="77 | (ev (let ((e (equal? a v))) (if e lst (let ( 5)"];
77 -> 78;
78 [label="78 | (ev (equal? a v) 5)"];
78 -> 79;
74 [label="74 | (ev #f 5)"];
74 -> 80;
80 [label="80 | (ko #<set: BOOL> 5)"];
80 -> 53;
79 [label="79 | (ko #<set: BOOL> 5)"];
79 -> 81;
81 [label="81 | (ev (if e lst (let ((d (cdr lst))) (member v 5)"];
81 -> 82;
81 -> 83;
82 [label="82 | (ev lst 5)"];
82 -> 84;
83 [label="83 | (ev (let ((d (cdr lst))) (member v d)) 5)"];
83 -> 85;
85 [label="85 | (ev (cdr lst) 5)"];
85 -> 86;
84 [label="84 | (ko #<set: #(struct:addr (2 3 4)) #(struct:a 5)"];
84 -> 67;
86 [label="86 | (ko #<set: #(struct:addr (2 3 4)) #(struct:a 5)"];
86 -> 87;
87 [label="87 | (ev (member v d) 5)"];
87 -> 88;
88 [label="88 | (ev (let ((c (null? lst))) (if c #f (let ((a 6)"];
88 -> 89;
89 [label="89 | (ev (null? lst) 6)"];
89 -> 90;
90 [label="90 | (ko #<set: BOOL> 6)"];
90 -> 91;
91 [label="91 | (ev (if c #f (let ((a (car lst))) (let ((e ( 6)"];
91 -> 92;
91 -> 93;
92 [label="92 | (ev (let ((a (car lst))) (let ((e (equal? a  6)"];
92 -> 94;
93 [label="93 | (ev #f 6)"];
93 -> 95;
95 [label="95 | (ko #<set: BOOL> 6)"];
95 -> 80;
94 [label="94 | (ev (car lst) 6)"];
94 -> 96;
96 [label="96 | (ko #<set: NUM> 6)"];
96 -> 97;
97 [label="97 | (ev (let ((e (equal? a v))) (if e lst (let ( 6)"];
97 -> 98;
98 [label="98 | (ev (equal? a v) 6)"];
98 -> 99;
99 [label="99 | (ko #<set: BOOL> 6)"];
99 -> 100;
100 [label="100 | (ev (if e lst (let ((d (cdr lst))) (member v 6)"];
100 -> 101;
100 -> 102;
101 [label="101 | (ev lst 6)"];
101 -> 103;
103 [label="103 | (ko #<set: #(struct:addr (2 3 4)) #(struct:a 6)"];
103 -> 104;
104 [label="104 | (ko #<set: #(struct:addr (2 3 4)) #(struct:a 5)"];
104 -> 105;
105 [label="105 | (ko #<set: #(struct:addr (2 3 4)) #(struct:a 4)"];
105 -> 106;
106 [label="106 | (ko #<set: #(struct:addr (2 3 4)) #(struct:a 3)"];
106 -> 107;
107 [label="107 | (ko #<set: #(struct:addr (2 3 4)) #(struct:a 2)"];
107 -> 108;
108 [label="108 | (ko #<set: #(struct:addr (2 3 4)) #(struct:a 1)"];
102 [label="102 | (ev (let ((d (cdr lst))) (member v d)) 6)"];
102 -> 109;
109 [label="109 | (ev (cdr lst) 6)"];
109 -> 110;
110 [label="110 | (ko #<set: #(struct:addr (2 3 4)) #(struct:a 6)"];
110 -> 111;
111 [label="111 | (ev (member v d) 6)"];
111 -> 88;
}